# -*- coding: utf-8 -*-
"""
@Time ： 2022/8/16 20:39
@Auth ： 异世の阿银
@File ：test05.py
@IDE ：PyCharm
@Motto：ABC(Always Be Coding)
"""

# String类的驻留机制
# 概念：程序开发中，字符串是我们程序员最最最常处理的数据类型
# 仅保存一份相同且不可变字符串的方法，不同的值存放在字符串的驻留池中，Python的驻留机制对相同的字符串只保留一份拷贝，
# 后续创建相同字符串时不会开辟新空间，而是把该字符串的地址赋值给新创建的变量。

# 相同的字符串内容在程序运行中，内存中仅有一份
# 好处：节省内存空间

str1 = 'python'
str2 = 'python'
str3 = 'python'

# Python语言中，如果直接输出字符串类型的变量，输出结果为字符串的数据内容，而不是内存地址。
# 为什么？原因是Python中Sting字符串类型重写了object类的str方法，所以输出的结果为字符串内容了。

# pyhton内置函数， ：id(变量名称) 查看数据在内存中的内存地址
print(f'str1 = {str1} str2 = {str2} str3 = {str3}')

# 查看内存地址（十进制）
# 字符串数据相同，其在内存中共享同一个地址（驻留机制）
print(f'id(str1) = {id(str1)} id(str2) = {id(str2)} id(str3) = {id(str3)}')

int1 = 11
int2 = 11
print(f'id(int1) = {id(int1)} id(int2) = {id(int2)}')
# 基本数据类型是常量，常量在真正执行的时候，所有的变量名称都会被常量替代。
# 没有在内存的‘堆区’中存在空间


# 1. 基本数据类型 ： int float bool  基本数据类型没有驻留机制
# 如果使用id(基本数据类型)这样的写法没有意义。  不关心地址
# 2. 对象类型（地址）： str, list, set, tuple, dict ...
# id(对象类型)
# 区别：对象类型有方法和数据    方法：对象名/变量名（参数） 对象调用的固定格式


# 字符串是程序开发中的最常用类型.
# 驻留机制可以节省程序执行的内存空间.

# 思考： 字符串的这种驻留机制，还能够更改字符串的数据吗？
'''
假设str1将数据更改为'java'，请问str2 或 str3对应的数据也更改吗？
'''

str1 = 'java'
print(f'str1 = {str1} str2 = {str2} str3 = {str3}')
print(f'id(str1) = {id(str1)} id(str2) = {id(str2)} id(str3) = {id(str3)}')

# 小结：字符串如果修改数据，并不是修改内存空间中对应的字符串数据。
# 而是开辟一块新的内存空间，存储新的字符串数据
# 最后将这个新的内存空间地址赋值给这个字符串变量进行接收。

